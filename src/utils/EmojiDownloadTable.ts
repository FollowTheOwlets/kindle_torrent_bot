/**
 * –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 */
export type FileStatus = {
    relPath: string;
    state: 'queued' | 'downloading' | 'done' | 'error';
    /** –ü—Ä–æ–≥—Ä–µ—Å—Å 0..100 (–æ–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–π) */
    pct?: number;
};

const ICON = {
    queued: 'üü°',
    downloading: '‚¨áÔ∏è',
    done: '‚úÖ',
    error: '‚ùå',
};

/** –õ–æ–∞–¥–±–∞—Ä –∏–∑ —ç–º–æ–¥–∑–∏: üü© / ‚¨úÔ∏è */
function bar(pct: number, width = 10): string {
    const p = Math.max(0, Math.min(100, Math.round(pct)));
    const filled = Math.round((p / 100) * width);
    return '„Äê' + 'üü©'.repeat(filled) + '‚¨úÔ∏è'.repeat(width - filled) + `„Äë${String(p).padStart(3)}%`;
}

/** –û–±—Ä–µ–∑–∞–µ—Ç –∏–º—è, –¥–æ–±–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ. */
function truncate(s: string, maxLen: number): string {
    if (s.length <= maxLen) return s;
    return s.slice(0, Math.max(0, maxLen - 1)) + '‚Ä¶';
}

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π –∏ –ª–æ–∞–¥–±–∞—Ä–∞–º–∏.
 */
export function renderEmojiTable(
    title: string,
    items: FileStatus[],
    opts?: { maxLines?: number; maxNameLen?: number; barWidth?: number }
): string {
    const maxLines = opts?.maxLines ?? 25;
    const maxNameLen = opts?.maxNameLen ?? 60;
    const barWidth = opts?.barWidth ?? 10;

    const total = items.length;
    const done = items.filter(i => i.state === 'done').length;
    const downloading = items.filter(i => i.state === 'downloading').length;

    const header = `${title}\n${ICON.done} ${done}/${total} ‚Ä¢ ${ICON.downloading} ${downloading} ‚Ä¢ ${ICON.queued} ${total - done - downloading}\n`;

    const lines: string[] = [];
    for (let i = 0; i < Math.min(items.length, maxLines); i++) {
        const it = items[i];
        const name = truncate(it.relPath, maxNameLen);
        const br = it.pct != null ? ` ${bar(it.pct, barWidth)}` : '';
        lines.push(`${ICON[it.state]}  ${name}${br}`);
    }
    if (items.length > maxLines) {
        lines.push(`‚Ä¶ –∏ –µ—â—ë ${items.length - maxLines} —Ñ–∞–π–ª(–æ–≤)`);
    }

    // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ –¥–ª–∏–Ω–µ
    const HARD = 3900;
    let text = header + lines.join('\n');
    if (text.length > HARD) {
        const tighter: string[] = [];
        for (let i = 0; i < Math.min(items.length, maxLines); i++) {
            const it = items[i];
            const name = truncate(it.relPath, 40);
            const br = it.pct != null ? ` ${bar(it.pct, 8)}` : '';
            tighter.push(`${ICON[it.state]}  ${name}${br}`);
        }
        text = header + tighter.join('\n');
        if (items.length > maxLines) text += `\n‚Ä¶ –∏ –µ—â—ë ${items.length - maxLines} —Ñ–∞–π–ª(–æ–≤)`;
    }
    return text;
}
