import { Scenes } from 'telegraf';
import { UserRepo } from '../repo/UserRepo.js';

/**
 * –°—Ü–µ–Ω–∞ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª: –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ï—Å–ª–∏ email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
 *
 * @param {UserRepo} users –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * @returns {Scenes.BaseScene<Scenes.SceneContext>} –ò–Ω—Å—Ç–∞–Ω—Å —Å—Ü–µ–Ω—ã.
 */
export const InstructionScene = (users: UserRepo) => {
    const sc = new Scenes.BaseScene<Scenes.SceneContext>('instruction');

    sc.enter(async (ctx) => {
        await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–ª–∞—Ç—å —Ñ–∞–π–ª—ã:');
    });

    sc.on('text', async (ctx) => {
        const email = String(ctx.message.text).trim();
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            return;
        }
        users.setEmail(ctx.from!.id, email);
        await ctx.reply(`‚úÖ Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${email}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /epub, /torrent, /help`);
        await ctx.scene.leave();
    });

    sc.command('cancel', async (ctx) => { await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ'); await ctx.scene.leave(); });
    return sc;
};
