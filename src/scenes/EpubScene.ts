import { Scenes } from 'telegraf';
import { UserRepo } from '../repo/UserRepo.js';
import { MailService } from '../services/MailService.js';
import { MessageUpdater } from '../utils/MessageUpdater.js';
import path from 'node:path';
import axios from 'axios';
import {cfg} from "../config/Config";

/**
 * –°—Ü–µ–Ω–∞ ¬´EPUB¬ª: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç .epub –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *
 * @param {UserRepo} users –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π email-–∞–¥—Ä–µ—Å–æ–≤.
 * @param {MailService} mail –ü–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.
 * @returns {Scenes.BaseScene<Scenes.SceneContext>}
 */
export const EpubScene = (users: UserRepo, mail: MailService) => {
    const sc = new Scenes.BaseScene<Scenes.SceneContext>('epub');

    sc.enter(async (ctx) => {
        await ctx.reply('üìö –ü—Ä–∏—à–ª–∏—Ç–µ .epub —Ñ–∞–π–ª ‚Äî —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –Ω–∞ –≤–∞—à email.');
    });

    sc.on('document', async (ctx) => {
        const email = users.getEmail(ctx.from!.id);
        if (!email) return ctx.scene.enter('instruction');

        const doc = ctx.message.document;
        const name = (doc.file_name || '').toLowerCase();
        if (!name.endsWith('.epub')) {
            await ctx.reply('‚ùå –≠—Ç–æ –Ω–µ .epub. –ü—Ä–∏—à–ª–∏—Ç–µ .epub –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /torrent.');
            return;
        }

        const ui = new MessageUpdater();
        await ui.start(ctx, `‚è≥ –ü–æ–ª—É—á–∞—é ${doc.file_name}...`);

        try {
            const f = await ctx.telegram.getFile(doc.file_id);
            const url = `https://api.telegram.org/file/bot${cfg.botToken}/${f.file_path}`;
            const resp = await axios.get<ArrayBuffer>(url, { responseType: 'arraybuffer' });
            const buf = Buffer.from(resp.data);

            await ui.update(ctx, '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –ø–æ—á—Ç—É...');
            const subject = `Kindle delivery: ${doc.file_name}`;
            await mail.sendFiles(
                email,
                subject,
                '–û—Ç–ø—Ä–∞–≤–∫–∞ .epub',
                [{ filename: path.basename(doc.file_name!), content: buf }],
            );

            await ui.update(ctx, `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
        } catch (e: any) {
            console.log(e)
            await ui.update(ctx, `‚ùå –û—à–∏–±–∫–∞: ${e?.message ?? e}`);
        }
    });

    sc.command('cancel', async (ctx) => { await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã EPUB'); await ctx.scene.leave(); });
    return sc;
};
