import {Scenes} from 'telegraf';
import {UserRepo} from '../repo/UserRepo.js';
import {TorrentSeenRepo} from '../repo/TorrentSeenRepo.js';
import {MailService} from '../services/MailService.js';
import {TorrentService} from '../services/TorrentService.js';
import {MessageUpdater} from '../utils/MessageUpdater.js';
import {getTorrentId} from '../utils/InfoHash.js';
import path from 'node:path';
import axios from 'axios';
import * as fs from 'node:fs';
import {cfg} from "../config/Config";
import {throttle} from "../utils/Throttle";
import {renderEmojiTable} from "../utils/EmojiDownloadTable";

/**
 * –°—Ü–µ–Ω–∞ ¬´TORRENT¬ª: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç .torrent.
 * - –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≥–æ –∂–µ infoHash: —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ .epub (–Ω–µ –±–æ–ª–µ–µ 5 —à—Ç).
 * - –ï—Å–ª–∏ .epub –±–æ–ª—å—à–µ 5 ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
 * - –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≥–æ –∂–µ .torrent: —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–æ—á—Ç–∞ —Å–∞–º–∞ —Ä–∞–∑–æ–±—å—ë—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏—Å–µ–º).
 *
 * @param {UserRepo} users –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π email-–∞–¥—Ä–µ—Å–æ–≤.
 * @param {TorrentSeenRepo} seen –£—á–µ—Ç —á–∏—Å–ª–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫ –æ–¥–Ω–æ–≥–æ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞.
 * @param {MailService} mail –ü–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.
 * @param {TorrentService} torrentSvc –¢–æ—Ä—Ä–µ–Ω—Ç-—Å–µ—Ä–≤–∏—Å.
 * @returns {Scenes.BaseScene<Scenes.SceneContext>}
 */
export const TorrentScene = (
    users: UserRepo,
    seen: TorrentSeenRepo,
    mail: MailService,
    torrentSvc: TorrentService
) => {
    const sc = new Scenes.BaseScene<Scenes.SceneContext>('torrent');

    sc.enter(async (ctx) => {
        await ctx.reply('üß≤ –ü—Ä–∏—à–ª–∏—Ç–µ .torrent ‚Äî —è —Å–∫–∞—á–∞—é –∏–∑ –Ω–µ–≥–æ .epub –∏ –ø–µ—Ä–µ—à–ª—é. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≥–æ –∂–µ .torrent –ø—Ä–∏—à–ª—ë—Ç **–≤—Å—ë** —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.');
    });

    sc.on('document', async (ctx) => {
        const email = users.getEmail(ctx.from!.id);
        if (!email) return ctx.scene.enter('instruction');

        const doc = ctx.message.document;
        const filename = (doc.file_name || '').toLowerCase();
        const isTorrent = filename.endsWith('.torrent') || (doc.mime_type || '').includes('bittorrent');
        if (!isTorrent) {
            await ctx.reply('‚ùå –≠—Ç–æ –Ω–µ .torrent. –ü—Ä–∏—à–ª–∏—Ç–µ .torrent –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /epub.');
            return;
        }

        const ui = new MessageUpdater();
        await ui.start(ctx, `‚è≥ –ü–æ–ª—É—á–∞—é ${doc.file_name}...`);

        try {
            // —Å–∫–∞—á–∏–≤–∞–µ–º .torrent –∫–∞–∫ –±—É—Ñ–µ—Ä
            const f = await ctx.telegram.getFile(doc.file_id);
            const url = `https://api.telegram.org/file/bot${cfg.botToken}/${f.file_path}`;
            const resp = await axios.get<ArrayBuffer>(url, {responseType: 'arraybuffer'});
            const tbuf = Buffer.from(resp.data);

            // –ø–æ–ª—É—á–∞–µ–º infoHash –∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const meta = await getTorrentId(tbuf);
            const hash = meta.infoHash;
            const attempt = seen.inc(ctx.from!.id, hash);

            const epubList = (meta.files ?? [])
                .map(x => x.path?.toLowerCase?.() ?? '')
                .filter(p => p.endsWith('.epub'));

            if (attempt === 1) {
                // 1-—è –æ—Ç–ø—Ä–∞–≤–∫–∞: —Ç–æ–ª—å–∫–æ .epub –∏ –Ω–µ –±–æ–ª–µ–µ 5
                if (epubList.length === 0) {
                    await ui.update(ctx, '‚ö†Ô∏è –í —Ç–æ—Ä—Ä–µ–Ω—Ç–µ –Ω–µ—Ç .epub —Ñ–∞–π–ª–æ–≤.');
                    return;
                }
                if (epubList.length > 5) {
                    await ui.update(ctx, `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ .epub (${epubList.length}). –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ—Ç –∂–µ .torrent ‚Äî —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—é **–≤—Å—ë** —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ.`);
                    return;
                }

                const throttledUpdate = throttle((snapshot) => {
                    const title = attempt === 1
                        ? '‚è¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ .epub'
                        : '‚è¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤';
                    const text = renderEmojiTable(title, snapshot, { maxLines: 25, maxNameLen: 80 });
                    ui.update(ctx, text).catch(() => {});
                }, 1000); // –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É

                const dl = await torrentSvc.downloadByFilter(
                    tbuf,
                    attempt === 1
                        ? (rel) => rel.toLowerCase().endsWith('.epub')
                        : (_rel) => true,
                    // –æ–±—â–∏–π —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–º–æ–∂–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞)
                    undefined,
                    // ‚¨ÖÔ∏è —Å–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                    throttledUpdate
                );

                throttledUpdate.cancel()
                throttledUpdate.flush()
                await ui.update(ctx, '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –ø–æ—á—Ç—É...');
                const attachments = await Promise.all(
                    dl.files.map(async (f) => ({
                        filename: f.relPath.replaceAll(path.sep, '/'),
                        content: await fs.promises.readFile(f.absPath), // <= –±–µ—Ä—ë–º Buffer
                    }))
                );
                const subject = `TG EPUB: ${dl.torrentName || doc.file_name}`;
                const sent = await mail.sendFiles(email, subject, `–û—Ç–ø—Ä–∞–≤–∫–∞ ${attachments.length} .epub`, attachments);
                await ui.update(ctx, `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}. –ü–∏—Å–µ–º: ${sent}`);
                await dl.downloadDir.cleanup().catch(() => {
                });
            } else {

                throw new Error("–ê –≤–æ—Ç —ç—Ç–æ –º—ã –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ–º");

                // // –ø–æ–≤—Ç–æ—Ä: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë
                // await ui.update(ctx, '‚è¨ –°–∫–∞—á–∏–≤–∞—é –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞...');
                // const dl = await torrentSvc.downloadByFilter(
                //     tbuf,
                //     _ => true,
                //     p => ui.update(ctx, `‚è¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${p}%`)
                // );
                //
                // await ui.update(ctx, '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –ø–æ—á—Ç—É (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏—Å–µ–º)...');
                // const attachments = dl.files.map(f => ({
                //     filename: f.relPath.replaceAll(path.sep, '/'),
                //     path: f.absPath
                // }));
                // const subject = `Torrent ALL: ${dl.torrentName || doc.file_name}`;
                // const sent = await mail.sendFiles(email, subject, `–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (${attachments.length})`, attachments);
                //
                // await ui.update(ctx, `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}. –ü–∏—Å–µ–º: ${sent}`);
                // await dl.downloadDir.cleanup().catch(() => {
                // });
            }
        } catch (e: any) {
            await ui.update(ctx, `‚ùå –û—à–∏–±–∫–∞: ${e?.message ?? e}`);
        }
    });

    sc.command('cancel', async (ctx) => {
        await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã TORRENT');
        await ctx.scene.leave();
    });
    return sc;
};
